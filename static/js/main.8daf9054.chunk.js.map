{"version":3,"sources":["AppTable/constant.tsx","AppTable/utils.tsx","AppTable/AppTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Images","validateRow","inputValue","record","index","quantityInput","parseInt","validObject","quantity","error","type","message","data","id","name","price","imageUrl","AppTable","form","useForm","mode","useState","setMode","formValues","setFormValues","formErrors","setFormErrors","temp","setTemp","columns","actions","tableForm","onDelete","onValidateQuantity","React","useMemo","dataIndex","render","urlValue","src","alt","style","width","height","title","key","_","errorStatus","get","formState","errors","errorMessage","classNames","clsx","includes","waring","position","field","onChange","renderProps","onValueChange","target","afterValue","floatValue","setValue","className","decimalScale","isNumericString","allowNegative","control","defaultValue","rules","validate","required","undefined","quantityError","quantityWarning","color","display","justifyContent","alignItems","fixedDecimalScale","prefix","console","log","toNumber","JSON","stringify","value","onClick","DeleteOutlined","useColumn","onFail","errorValues","map","err","padding","span","htmlFor","register","placeholder","dataSource","pagination","handleSubmit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8daf9054.chunk.js","sourcesContent":["export const Images = {\n  sample: 'https://previews.123rf.com/images/aquir/aquir1311/aquir131100316/23569861-sample-grunge-red-round-stamp.jpg',\n};\n","export const validateRow = (inputValue: string, record: any, index: any) => {\n  const quantityInput = parseInt(inputValue, 10);\n\n  const validObject = {\n    quantity: quantityInput,\n    error: { type: 'default', message: '' },\n  };\n  if (quantityInput < 10) {\n    return validObject;\n  }\n  if (quantityInput <= 20) {\n    return {\n      ...validObject,\n      error: { type: 'warning', message: 'Too much' },\n    };\n  } else {\n    return {\n      ...validObject,\n      quantity: 20,\n      error: { type: 'error', message: 'Not Enough' },\n    };\n  }\n};\n","import React, { useRef, useState } from 'react';\n\nimport 'antd/dist/antd.css';\nimport './index.scss';\nimport { Table, Button, Tooltip, Row, Col } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { Controller, useForm, UseFormReturn } from 'react-hook-form';\nimport NumberFormat from 'react-number-format';\nimport clsx from 'clsx';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { get, isArray, map, toNumber } from 'lodash';\nimport { Images } from './constant';\nimport { validateRow } from './utils';\nimport { ErrorMessage } from '@hookform/error-message';\n\ninterface ColumnAction {\n  onDelete: (...params: any) => void;\n  onValidateQuantity: (...params: any) => any;\n}\nconst useColumn = (actions: ColumnAction, tableForm: UseFormReturn<any>) => {\n  const { onDelete, onValidateQuantity } = actions;\n  const columns = React.useMemo<ColumnsType<any>>(\n    () => [\n      {\n        dataIndex: 'imageUrl',\n        render: urlValue => {\n          return (\n            <img\n              src={urlValue}\n              alt=\"prod_img\"\n              style={{\n                width: 50,\n                height: 50,\n              }}\n            />\n          );\n        },\n      },\n      {\n        title: 'name',\n        dataIndex: 'name',\n        key: 'name',\n        render: (_, record) => {\n          return (\n            <div>\n              <div>{record.name}</div>\n            </div>\n          );\n        },\n      },\n      {\n        title: 'quantity',\n        dataIndex: 'quantity',\n        key: 'quantity',\n        width: 100,\n        render: (_, record, index) => {\n          const errorStatus = get(tableForm.formState.errors, `product[${index}].quantity.type`, 'default');\n          const errorMessage = get(tableForm.formState.errors, `product[${index}].quantity.message`, '');\n          const classNames = clsx(\n            'product__input',\n            { error: ['required', 'quantityError'].includes(errorStatus) },\n            { waring: ['quantityWarning'].includes(errorStatus) }\n          );\n          return (\n            <div>\n              <div style={{ position: 'relative' }}>\n                <Controller\n                  render={({ field: { onChange, ...renderProps } }) => {\n                    return (\n                      <NumberFormat\n                        {...renderProps}\n                        onValueChange={target => {\n                          onChange();\n                          const afterValue = target.floatValue ? target.floatValue : 1;\n                          tableForm.setValue(`product[${index}].quantity`, afterValue);\n                        }}\n                        // forcus on validate fail not work here\n                        // onFocus={(\n                        //   event: React.FocusEvent<HTMLInputElement>\n                        // ) => {\n                        //   event.target.select();\n                        // }}\n                        //\n                        className={classNames}\n                        decimalScale={0}\n                        isNumericString\n                        allowNegative={false}\n                      />\n                    );\n                  }}\n                  control={tableForm.control}\n                  defaultValue={record.quantity}\n                  name={`product[${index}].quantity`}\n                  rules={{\n                    validate: {\n                      required: data => {\n                        return !data ? 'requiredField' : undefined;\n                      },\n                      quantityError: data => {\n                        const { error } = onValidateQuantity(data, record, index);\n                        return error.type === 'error' ? error.message : undefined;\n                      },\n                      quantityWarning: data => {\n                        const { error } = onValidateQuantity(data, record, index);\n                        return error.type === 'warning' ? error.message : undefined;\n                      },\n                    },\n                  }}\n                />\n                {['required', 'quantityError', 'quantityWarning'].includes(errorStatus) && (\n                  <Tooltip title={errorMessage} color={errorStatus === 'quantityWarning' ? 'yellow' : 'red'}>\n                    <span className={`input_error ${errorStatus === 'quantityWarning' ? 'waring' : ''}`} />\n                  </Tooltip>\n                )}\n              </div>\n            </div>\n          );\n        },\n      },\n\n      {\n        title: 'price',\n        key: 'g',\n        width: 150,\n        render: (_, record, index) => {\n          const errorMessage = get(tableForm.formState.errors, `product[${index}].price.message`, '');\n\n          return (\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <div style={{ position: 'relative' }}>\n                <Controller\n                  render={({ field: { onChange, ...renderProps } }) => {\n                    return (\n                      <NumberFormat\n                        {...renderProps}\n                        onValueChange={target => {\n                          onChange();\n\n                          tableForm.setValue(`product[${index}].price`, target.floatValue);\n                        }}\n                        isNumericString\n                        decimalScale={2}\n                        fixedDecimalScale\n                        allowNegative={false}\n                        prefix=\"$\"\n                      />\n                    );\n                  }}\n                  name={`product[${index}].price`}\n                  defaultValue={record.price}\n                  control={tableForm?.control}\n                  rules={{\n                    validate: {\n                      required: data => {\n                        console.log('price', data);\n                        const inValidPrice = toNumber(data);\n                        return !inValidPrice ? `${JSON.stringify(data)}invalidDays` : undefined;\n                      },\n                    },\n                  }}\n                />\n                {get(tableForm.formState.errors, `product[${index}].price.type`, '') === 'required' && (\n                  <Tooltip title={errorMessage} color=\"red\">\n                    <span className=\"input_error\" />\n                  </Tooltip>\n                )}\n              </div>\n            </div>\n          );\n        },\n      },\n\n      {\n        title: () => (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {'action'}\n          </div>\n        ),\n        dataIndex: 'c',\n        key: 'h',\n        width: 55,\n        render: (value, record, index) => {\n          const handleDelete = () => {\n            if (onDelete) {\n              onDelete(record, index);\n            }\n          };\n          return (\n            <div\n              style={{\n                width: '100%',\n                display: 'flex',\n                justifyContent: 'space-around',\n                alignItems: 'center',\n              }}\n            >\n              <Button onClick={handleDelete}>\n                <DeleteOutlined />\n              </Button>\n            </div>\n          );\n        },\n      },\n    ],\n    [tableForm, onDelete, onValidateQuantity]\n  );\n\n  return columns;\n};\n\nconst data = [\n  {\n    id: '1',\n    name: 'John Brown',\n    quantity: 4,\n    price: 12,\n    imageUrl: Images.sample,\n  },\n  {\n    id: '21',\n    name: 'hon BrJown',\n    quantity: 3,\n    price: 14,\n    imageUrl: Images.sample,\n  },\n];\nconst AppTable = () => {\n  const form = useForm({ mode: 'onBlur' });\n\n  const [mode, setMode] = useState('send');\n  const [formValues, setFormValues] = useState('');\n  const [formErrors, setFormErrors] = useState('');\n  const [temp, setTemp] = useState('');\n\n  const deleteRow = () => {};\n\n  const columns = useColumn(\n    {\n      onDelete: deleteRow,\n      onValidateQuantity: validateRow,\n    },\n    form\n  );\n  const onFail = (error: any) => {\n    console.log(error);\n    const errorValues = map(error, err => {\n      const { message, type } = err;\n      return { message, type };\n    });\n    console.log(JSON.stringify(errorValues, undefined, 2));\n    setFormErrors(JSON.stringify(errorValues, undefined, 2));\n  };\n  const onEdit = () => {\n    setMode('edit');\n    form.handleSubmit(data => {\n      console.log({ data });\n      setFormValues(JSON.stringify(data, undefined, 2));\n      setFormErrors('');\n    }, onFail)();\n  };\n  const onSent = () => {\n    setMode('send');\n    form.handleSubmit(data => {\n      console.log({ data });\n      setFormValues(JSON.stringify(data, undefined, 2));\n      setFormErrors('');\n    }, onFail)();\n  };\n  return (\n    <div style={{ padding: 60 }}>\n      <form>\n        <Row>\n          <Col span={12}>\n            <div>\n              <span>Shipping Controller:</span>\n              <Controller\n                render={({ field: { onChange, ...renderProps } }) => {\n                  return (\n                    <NumberFormat\n                      {...renderProps}\n                      onValueChange={value => {\n                        onChange();\n                        form.setValue('shippingDays', value.floatValue);\n                      }}\n                      decimalScale={0}\n                      isNumericString\n                      allowNegative={false}\n                    />\n                  );\n                }}\n                // focus using ref\n                // onFocus={() => {\n                //   if (shippingDayRef.current) {\n                //     shippingDayRef.current.focus();\n                //   }\n                // }}\n                control={form.control}\n                name=\"shippingDays\"\n                rules={{\n                  validate: {\n                    required: data => {\n                      setTemp(JSON.stringify(data));\n\n                      if (mode === 'send') {\n                        // not empty and gt 1\n                        return !toNumber(data) ? `${JSON.stringify(data)}invalidDays` : undefined;\n                      }\n                      // not create mode, input is valid by default\n                      return undefined;\n                    },\n                  },\n                }}\n              />\n              <span> day</span>\n            </div>\n\n            <ErrorMessage errors={form.formState.errors} name=\"shippingDays\" />\n            <div>Shipping Controller validate: {temp}</div>\n          </Col>\n          <Col span={12}>\n            <div>\n              <label htmlFor=\"name\">Name</label>\n              <input {...form.register('name', { required: 'name is required' })} placeholder=\"name\" />\n              <ErrorMessage errors={form.formState.errors} name=\"name\" render={({ message }) => <p>{message}</p>} />\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={12}>\n            <div>\n              <span>Shipping input:</span>\n              <input\n                {...form.register('shippingDaysInput', {\n                  validate: {\n                    required: data => {\n                      console.log({ data, mode });\n                      if (mode === 'send') {\n                        // not empty and gt 1\n                        return !toNumber(data) ? `${JSON.stringify(data)}invalidDays` : undefined;\n                      }\n                      // not create mode, input is valid by default\n                      return undefined;\n                    },\n                  },\n                })}\n              />\n\n              <span> day</span>\n            </div>\n\n            <ErrorMessage errors={form.formState.errors} name=\"shippingDaysInput\" />\n          </Col>\n        </Row>\n\n        <Table columns={columns} dataSource={data} pagination={false} />\n\n        <Row>\n          <Col span={12}>\n            <Button onClick={onEdit}>Edit</Button>\n          </Col>\n          <Col span={12}>\n            <Button onClick={onSent}>Submit</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={12}>\n            <div>Values</div>\n            <pre>{formValues}</pre>\n          </Col>\n          <Col span={12}>\n            <div>Errors</div>\n            <pre>{formErrors}</pre>\n          </Col>\n        </Row>\n      </form>\n    </div>\n  );\n};\nexport default AppTable;\n","import 'antd/dist/antd.css';\n\nimport AppTable from './AppTable/AppTable';\n\nconst App = () => {\n  return <AppTable></AppTable>;\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}